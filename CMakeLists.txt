cmake_minimum_required(VERSION 3.10)  # cmake最低版本
project(Leetcode)
set(CMAKE_CXX_STANDARD 11)


# 0.基础代码
#add_executable(Leetcode 0.基础代码/快速排序.cpp)
#add_executable(Leetcode 0.基础代码/堆排序.cpp)
#==============================================================================

# 1.剑指offer
#add_executable(Leetcode 1.剑指offer/剑指 Offer 52. 两个链表的第一个公共节点.cpp)
#==============================================================================

# 1.数组_排序
#add_executable(Leetcode 1.数组_排序/_4_寻找两个正序数组的中位数.cpp)
#add_executable(Leetcode 1.数组_排序/_704_二分查找.cpp)
#add_executable(Leetcode 1.数组_排序/_27_移除元素)
#add_executable(Leetcode 1.数组_排序/_54_螺旋矩阵.cpp)
#add_executable(Leetcode 1.数组_排序/_59_螺旋矩阵II.cpp)
#add_executable(Leetcode 1.数组_排序/_88_合并两个有序数组.cpp)
#add_executable(Leetcode 1.数组_排序/_75_颜色分类.cpp)
#add_executable(Leetcode 1.数组_排序/_977_有序数组的平方.cpp)
#add_executable(Leetcode 1.数组_排序/_209_长度最小的子数组.cpp)
#add_executable(Leetcode 1.数组_排序/_215_数组中的第K个最大元素.cpp)
#add_executable(Leetcode 1.数组_排序/_912_排序数组.cpp)
#add_executable(Leetcode 1.数组_排序/面试题16.16.部分排序.cpp)
#add_executable(Leetcode 1.数组_排序/面试题 17.14. 最小K个数.cpp)

#==============================================================================

# 2.链表
#add_executable(Leetcode 2.链表/快慢指针找单链表中间结点.cpp)
#add_executable(Leetcode 2.链表/复制一个单链表.cpp)
#add_executable(Leetcode 2.链表/_206_反转链表.cpp)
#add_executable(Leetcode 2.链表/_92_反转链表2.cpp)
#add_executable(Leetcode 2.链表/_203_移除链表元素.cpp)
#add_executable(Leetcode 2.链表/_21_合并两个有序链表.cpp)
#add_executable(Leetcode 2.链表/_23_合并K个升序链表.cpp)
#add_executable(Leetcode 2.链表/_24_两两交换链表中的节点.cpp)
#add_executable(Leetcode 2.链表/_25_K个一组翻转链表.cpp)
#add_executable(Leetcode 2.链表/_19_删除链表的倒数第N个结点.cpp)
#add_executable(Leetcode 2.链表/_2_两数相加.cpp)
#add_executable(Leetcode 2.链表/_160_相交链表.cpp)
#add_executable(Leetcode 2.链表/_142_环形链表II.cpp)
#add_executable(Leetcode 2.链表/_143_重排链表.cpp)
#add_executable(Leetcode 2.链表/_148_排序链表.cpp)
#add_executable(Leetcode 2.链表/_86_分隔链表.cpp)
#add_executable(Leetcode 2.链表/_234_回文链表.cpp)

#==============================================================================

# 3.栈和队列
#add_executable(Leetcode 3.栈和队列/_155_最小栈.cpp)
#add_executable(Leetcode 3.栈和队列/_232_用栈实现队列.cpp)
#add_executable(Leetcode 3.栈和队列/_225_用队列实现栈.cpp)
#add_executable(Leetcode 3.栈和队列/_20_有效的括号.cpp)
#add_executable(Leetcode 3.栈和队列/_1047_删除字符串中的所有相邻重复项.cpp)
#add_executable(Leetcode 3.栈和队列/_150_逆波兰表达式求值.cpp)
#add_executable(Leetcode 3.栈和队列/_239_滑动窗口最大值_重写.cpp)
#add_executable(Leetcode 3.栈和队列/_347_前K个高频元素.cpp)
#add_executable(Leetcode 3.栈和队列/_654_最大二叉树.cpp)

#==============================================================================

# 4.二叉树
## 前中后序遍历
#add_executable(Leetcode 4.二叉树/_144_二叉树的前序遍历.cpp)
#add_executable(Leetcode 4.二叉树/_145_二叉树的后序遍历.cpp)
#add_executable(Leetcode 4.二叉树/_94_二叉树的中序遍历.cpp)
#add_executable(Leetcode 4.二叉树/_102_二叉树的层序遍历.cpp)
#add_executable(Leetcode 4.二叉树/层序遍历模板题/_107_二叉树的层次遍历II.cpp)
#add_executable(Leetcode 4.二叉树/层序遍历模板题/_199_二叉树的右视图.cpp)
#add_executable(Leetcode 4.二叉树/层序遍历模板题/_637_二叉树的层平均值.cpp)
#add_executable(Leetcode 4.二叉树/层序遍历模板题/_429_N叉树的层序遍历.cpp)
#add_executable(Leetcode 4.二叉树/层序遍历模板题/_515_在每个树行中找最大值.cpp)
#add_executable(Leetcode 4.二叉树/层序遍历模板题/_116_填充每个节点右侧节点指针.cpp)
#add_executable(Leetcode 4.二叉树/层序遍历模板题/_117_填充每个节点右侧节点指针 II.cpp)

## 构建二叉树
#add_executable(Leetcode 4.二叉树/_105_从前序与中序遍历序列构造二叉树.cpp)
#add_executable(Leetcode 4.二叉树/_106_从中序与后序遍历序列构造二叉树.cpp)

#add_executable(Leetcode 4.二叉树/_104_二叉树的最大深度.cpp)
#add_executable(Leetcode 4.二叉树/_111_二叉树的最小深度.cpp)
#add_executable(Leetcode 4.二叉树/_98_验证二叉搜索树.cpp)

#add_executable(Leetcode 4.二叉树/_199plus_二叉树的俯视图.cpp)
#add_executable(Leetcode 4.二叉树/_226_翻转二叉树.cpp)

#==============================================================================

# 5.字符串
#add_executable(Leetcode 5.字符串/_3_无重复字符的最长子串.cpp)
#add_executable(Leetcode 5.字符串/_395_至少有K个重复字符的最长子串.cpp)
#add_executable(Leetcode 5.字符串/_340_至多包含K个不同字符的最长子串.cpp)
#add_executable(Leetcode 5.字符串/_344_反转字符串.cpp)
#add_executable(Leetcode 5.字符串/_541_反转字符串II.cpp)
#add_executable(Leetcode 5.字符串/_151_反转字符串中的单词.cpp)

#==============================================================================

# 6.哈希表
#add_executable(Leetcode 6.哈希表/_242_有效的字母异位词.cpp)
#add_executable(Leetcode 6.哈希表/_349_两个数组的交集.cpp)
#add_executable(Leetcode 6.哈希表/_1_两数之和.cpp)
#add_executable(Leetcode 6.哈希表/_167_两数之和II-输入有序数组.cpp)
#add_executable(Leetcode 6.哈希表/_15_三数之和.cpp)
#add_executable(Leetcode 6.哈希表/_16_最接近的三数之和.cpp)
#add_executable(Leetcode 6.哈希表/_454_四数相加Ⅱ.cpp)

#==============================================================================

# 7.回溯算法
#add_executable(Leetcode 7.回溯算法/_77_组合.cpp)
add_executable(Leetcode 7.回溯算法/_78_子集.cpp)

#==============================================================================

# 8.贪心算法

#==============================================================================

# 9.动态规划
#add_executable(Leetcode 9.动态规划/1.动态规划基础/_509_斐波那契数.cpp)
#add_executable(Leetcode 9.动态规划/1.动态规划基础/_70_爬楼梯.cpp)
#add_executable(Leetcode 9.动态规划/_53_最大子数组和.cpp)
#add_executable(Leetcode 9.动态规划/_121_买卖股票的最佳时机.cpp)
#add_executable(Leetcode 9.动态规划/_674_最长连续递增序列)
#add_executable(Leetcode 9.动态规划/_198_打家劫舍.cpp)
#add_executable(Leetcode 12.CodeTop/_32_最长有效括号.cpp)

#==============================================================================

# 12.CodeTop
#add_executable(Leetcode 12.CodeTop/_146_LRU缓存.cpp)
#add_executable(Leetcode 12.CodeTop/_33_搜索旋转排序数组.cpp)
#add_executable(Leetcode 12.CodeTop/_8_字符串转换整数atoi)
#add_executable(Leetcode 12.CodeTop/_22_括号生成)
#add_executable(Leetcode 12.CodeTop/_76_最小覆盖子串.cpp)


#==============================================================================