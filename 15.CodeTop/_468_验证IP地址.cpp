// https://leetcode.cn/problems/validate-ip-address/
// Created by caokang on 2023/10/7.
#include <string>
#include <vector>
#include <iostream>

using namespace std;

// 很多坑，各种细节
class Solution468 {
public:
    string validIPAddress(string queryIP) {
        if (queryIP.empty()) return "Neither";

        if (isIPv4(queryIP)) {
            return "IPv4";
        }
        else if (isIPv6(queryIP)) {
            return "IPv6";
        }
        else {
            return "Neither";
        }
    }

    // 判断ipv4
    bool isIPv4(string queryIP) {
        int pointNum = 0;
        vector<string> ipNumStr;
        for (int i = 0; i < queryIP.size(); ++i) {
            if (queryIP[i] == '.') {
                pointNum++;
                continue;
            }
            else if (isdigit(queryIP[i])) {
                int start = i;
                while (i + 1 < queryIP.size() && isdigit(queryIP[i + 1])) {
                    i++;
                }   // 退出while，queryIP[i+1]不是数字字符，queryIP[i]还是数字字符
                ipNumStr.push_back(queryIP.substr(start, i - start + 1));
            }
            else {  // 存在非  数字字符  .的字符，不符合要求
                return false;
            }
        }
        if (pointNum != 3 || ipNumStr.size() != 4) {    // 遇到'.'直接跳过，所以还得判断字符串数组中元素的个数，防止ipv4最后是'.'
            return false;
        }
        // 遍历string数组ipNumStr，里面的数字要符合ipv4要求
        for (int i = 0; i < ipNumStr.size(); ++i) {
            string str = ipNumStr[i];
            // 不能为空
            if (str.empty()) return false;
            // 不能包含前导0
            if (str.size() != 1 && str[0] == '0') return false;

            // 坑！！先要判断str的长度，避免stoi(str)报错，ipv4每一段最长3个数字
            if (str.size() < 1 || str.size() > 3) return false;
            int num = stoi(str);
            if (num >= 0 && num <= 255) {
                continue;
            }
            else {
                return false;
            }
        }
        return true;
    }

    // 判断ipv6
    bool isIPv6(string queryIP) {
        int colonNum = 0;
        vector<string> ipStr;
        for (int i = 0; i < queryIP.size(); ++i) {
            if (queryIP[i] == ':') {
                colonNum++;
                continue;
            }
            else if (isdigit(queryIP[i]) || isalpha(queryIP[i])) {
                int start = i;
                while (i + 1 < queryIP.size() && queryIP[i + 1] != ':') {
                    i++;
                }   // 退出while，queryIP[i+1]是':'，或者i走到了最后一个字符
                ipStr.push_back(queryIP.substr(start, i - start + 1));
            }
            else {
                return false;
            }
        }
        // 避免ipv6字符串最后结尾的是":"   前面代码直接跳过了，所以会确实一段，必须判断 ipStr.size() != 8
        if (colonNum != 7 || ipStr.size() != 8) {
            return false;
        }

        for (int i = 0; i < ipStr.size(); ++i) {
            string str = ipStr[i];
            int n = str.size();
            if (n < 1 || n > 4) {
                return false;
            }
            else {  // 遍历字符串数组ipStr，判断0db8之类的是否符合ipv6格式
                for (int j = 0; j < str.size(); ++j) {
                    if (isdigit(str[j]) || ('a' <= _tolower(str[j]) && _tolower(str[j]) <= 'f')) continue;
                    else return false;
                }
            }
        }
        return true;
    }
};

int main() {
    string queryIP = "2001:0db8:85a3:0:0:8A2E:0370:7334";
    queryIP = "1.0.1.";
    query
    Solution468 solution;
    string res = solution.validIPAddress(queryIP);
    cout << res << endl;
}